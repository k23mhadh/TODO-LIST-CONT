{"ast":null,"code":"import axios from 'axios';\n//import { ListsApi } from 'todo-list-client'\n//const api = new ListsApi()\n\n//const lists = ['Work Tasks', 'Personal Tasks', 'Shopping List']\n//const listItems: Record<string, string[]> = {\n//   'Work Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n//   'Personal Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n//  'Shopping List': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter']\n//}\n\nexport const apiClient = {\n  getLists: async () => {\n    return axios.get('http://localhost:3000/lists').then(res => res.data);\n  },\n  addList: async listName => {\n    const addedList = axios.post('http://localhost:3000/lists', {\n      id: listName,\n      description: listName\n    }).then(res => res.data);\n    console.debug('-- addList', listName, addedList);\n    return Promise.resolve(addedList);\n  },\n  getTodos: async listName => {\n    try {\n      const response = await axios.get(`http://localhost:3000/lists`);\n      const lists = response.data; // Ensure this is an array\n      console.log(\"lists\", lists);\n      const list = lists.find(list => list.id === listName);\n      if (!list || !list.items) {\n        return []; // Return an empty array if the list or items are not found\n      }\n      return list.items.map(item => item.nom);\n    } catch (error) {\n      console.error(\"Error fetching todos:\", error);\n      throw error; // Re-throw the error to handle it elsewhere if needed\n    }\n  }\n  /* addTodo: async (listName: string, todo: string) => {\n      console.debug('-- addTodo', listName, todo, listItems);\n      if (!listItems[listName]) {\n          listItems[listName] = []\n      }\n      listItems[listName].push(todo)\n      return Promise.resolve(listItems[listName])\n  } */\n};","map":{"version":3,"names":["axios","apiClient","getLists","get","then","res","data","addList","listName","addedList","post","id","description","console","debug","Promise","resolve","getTodos","response","lists","log","list","find","items","map","item","nom","error"],"sources":["/home/kaies/Desktop/todo-list/todolists-frontend/src/api-client.ts"],"sourcesContent":["import axios from 'axios'; \nimport { IItem, ITodoList } from '../interfaces';\n\n//import { ListsApi } from 'todo-list-client'\n//const api = new ListsApi()\n\n\n//const lists = ['Work Tasks', 'Personal Tasks', 'Shopping List']\n//const listItems: Record<string, string[]> = {\n //   'Work Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n //   'Personal Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n  //  'Shopping List': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter']\n//}\n\n\nexport const apiClient = {\n    getLists: async () => {\n        return axios.get('http://localhost:3000/lists').then(res=>res.data)\n    },\n    addList: async (listName: string) => {\n        const addedList = axios.post('http://localhost:3000/lists', {id: listName, description: listName}).then(res=>res.data)\n        \n        console.debug('-- addList', listName, addedList);\n        return Promise.resolve(addedList)\n    },\n    getTodos: async (listName: string): Promise<string[]> => {\n        try {\n            const response = await axios.get(`http://localhost:3000/lists`);\n            const lists: ITodoList[] = response.data; // Ensure this is an array\n            console.log(\"lists\", lists);\n            const list = lists.find((list: ITodoList) => list.id === listName);\n    \n            if (!list || !list.items) {\n                return []; // Return an empty array if the list or items are not found\n            }\n    \n            return list.items.map((item: IItem) => item.nom);\n        } catch (error) {\n            console.error(\"Error fetching todos:\", error);\n            throw error; // Re-throw the error to handle it elsewhere if needed\n        }\n    },\n    /* addTodo: async (listName: string, todo: string) => {\n        console.debug('-- addTodo', listName, todo, listItems);\n        if (!listItems[listName]) {\n            listItems[listName] = []\n        }\n        listItems[listName].push(todo)\n        return Promise.resolve(listItems[listName])\n    } */\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB;AACA;;AAGA;AACA;AACC;AACA;AACC;AACF;;AAGA,OAAO,MAAMC,SAAS,GAAG;EACrBC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IAClB,OAAOF,KAAK,CAACG,GAAG,CAAC,6BAA6B,CAAC,CAACC,IAAI,CAACC,GAAG,IAAEA,GAAG,CAACC,IAAI,CAAC;EACvE,CAAC;EACDC,OAAO,EAAE,MAAOC,QAAgB,IAAK;IACjC,MAAMC,SAAS,GAAGT,KAAK,CAACU,IAAI,CAAC,6BAA6B,EAAE;MAACC,EAAE,EAAEH,QAAQ;MAAEI,WAAW,EAAEJ;IAAQ,CAAC,CAAC,CAACJ,IAAI,CAACC,GAAG,IAAEA,GAAG,CAACC,IAAI,CAAC;IAEtHO,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEN,QAAQ,EAAEC,SAAS,CAAC;IAChD,OAAOM,OAAO,CAACC,OAAO,CAACP,SAAS,CAAC;EACrC,CAAC;EACDQ,QAAQ,EAAE,MAAOT,QAAgB,IAAwB;IACrD,IAAI;MACA,MAAMU,QAAQ,GAAG,MAAMlB,KAAK,CAACG,GAAG,CAAC,6BAA6B,CAAC;MAC/D,MAAMgB,KAAkB,GAAGD,QAAQ,CAACZ,IAAI,CAAC,CAAC;MAC1CO,OAAO,CAACO,GAAG,CAAC,OAAO,EAAED,KAAK,CAAC;MAC3B,MAAME,IAAI,GAAGF,KAAK,CAACG,IAAI,CAAED,IAAe,IAAKA,IAAI,CAACV,EAAE,KAAKH,QAAQ,CAAC;MAElE,IAAI,CAACa,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,EAAE;QACtB,OAAO,EAAE,CAAC,CAAC;MACf;MAEA,OAAOF,IAAI,CAACE,KAAK,CAACC,GAAG,CAAEC,IAAW,IAAKA,IAAI,CAACC,GAAG,CAAC;IACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZd,OAAO,CAACc,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}