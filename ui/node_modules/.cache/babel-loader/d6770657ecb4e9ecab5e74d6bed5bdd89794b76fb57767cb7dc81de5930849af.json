{"ast":null,"code":"import axios from'axios';//import { ListsApi } from 'todo-list-client'\n//const api = new ListsApi()\n//const lists = ['Work Tasks', 'Personal Tasks', 'Shopping List']\n//const listItems: Record<string, string[]> = {\n//   'Work Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n//   'Personal Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n//  'Shopping List': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter']\n//}\nexport const apiClient={getLists:async()=>{return axios.get(`${process.env.REACT_APP_API_URL}/lists`).then(res=>res.data);},addList:async listName=>{const addedList=axios.post(`${process.env.REACT_APP_API_URL}/lists`,{id:listName,description:listName,items:[]}).then(res=>res.data.data.id);return Promise.resolve(addedList);},getTodos:async listName=>{try{const response=await axios.get(`${process.env.REACT_APP_API_URL}/lists`);const lists=response.data.data;// Ensure this is an array\nconst list=lists.find(list=>list.id===listName);if(!list||!list.items){return[];}return list.items.map(item=>item.nom);}catch(error){console.error(\"Error fetching todos:\",error);throw error;}},addTodo:async(listName,todo)=>{//console.debug('-- addTodo', listName, todo, listItems);\nconst addedtem=await axios.post(`${process.env.REACT_APP_API_URL}/lists/${listName}/items`,{id:todo,nom:todo}).then(res=>res.data.data.items);return Promise.resolve(addedtem);}};","map":{"version":3,"names":["axios","apiClient","getLists","get","process","env","REACT_APP_API_URL","then","res","data","addList","listName","addedList","post","id","description","items","Promise","resolve","getTodos","response","lists","list","find","map","item","nom","error","console","addTodo","todo","addedtem"],"sources":["/home/kaies/Desktop/todo-list/ui/src/api-client.ts"],"sourcesContent":["import axios from 'axios'; \nimport { IItem, ITodoList } from '../interfaces';\n\n//import { ListsApi } from 'todo-list-client'\n//const api = new ListsApi()\n\n\n//const lists = ['Work Tasks', 'Personal Tasks', 'Shopping List']\n//const listItems: Record<string, string[]> = {\n //   'Work Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n //   'Personal Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n  //  'Shopping List': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter']\n//}\n\n\nexport const apiClient = {\n    getLists: async () => {\n        return axios.get(`${process.env.REACT_APP_API_URL}/lists`).then(res=>res.data)\n    },\n    addList: async (listName: string) => {\n        const addedList = axios.post(`${process.env.REACT_APP_API_URL}/lists`, {id: listName, description: listName,items:[]}).then(res=>res.data.data.id);\n        return Promise.resolve(addedList)\n    },\n    getTodos: async (listName: string): Promise<string[]> => {\n        try {\n            const response = await axios.get(`${process.env.REACT_APP_API_URL}/lists`);\n            const lists = response.data.data; // Ensure this is an array\n            const list = lists.find((list: ITodoList) => list.id === listName);\n    \n            if (!list || !list.items) {\n                return [];\n            }\n            return list.items.map((item: IItem) => item.nom);\n        } catch (error) {\n            console.error(\"Error fetching todos:\", error);\n            throw error; \n        }\n    },\n    addTodo: async (listName: string, todo: string) => {\n        //console.debug('-- addTodo', listName, todo, listItems);\n        const addedtem = await axios.post(`${process.env.REACT_APP_API_URL}/lists/${listName}/items`, {id: todo, nom: todo}).then(res=>res.data.data.items);\n        return Promise.resolve(addedtem);\n    }\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB;AACA;AAGA;AACA;AACC;AACA;AACC;AACF;AAGA,MAAO,MAAM,CAAAC,SAAS,CAAG,CACrBC,QAAQ,CAAE,KAAAA,CAAA,GAAY,CAClB,MAAO,CAAAF,KAAK,CAACG,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,QAAQ,CAAC,CAACC,IAAI,CAACC,GAAG,EAAEA,GAAG,CAACC,IAAI,CAAC,CAClF,CAAC,CACDC,OAAO,CAAE,KAAO,CAAAC,QAAgB,EAAK,CACjC,KAAM,CAAAC,SAAS,CAAGZ,KAAK,CAACa,IAAI,CAAC,GAAGT,OAAO,CAACC,GAAG,CAACC,iBAAiB,QAAQ,CAAE,CAACQ,EAAE,CAAEH,QAAQ,CAAEI,WAAW,CAAEJ,QAAQ,CAACK,KAAK,CAAC,EAAE,CAAC,CAAC,CAACT,IAAI,CAACC,GAAG,EAAEA,GAAG,CAACC,IAAI,CAACA,IAAI,CAACK,EAAE,CAAC,CAClJ,MAAO,CAAAG,OAAO,CAACC,OAAO,CAACN,SAAS,CAAC,CACrC,CAAC,CACDO,QAAQ,CAAE,KAAO,CAAAR,QAAgB,EAAwB,CACrD,GAAI,CACA,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAApB,KAAK,CAACG,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,QAAQ,CAAC,CAC1E,KAAM,CAAAe,KAAK,CAAGD,QAAQ,CAACX,IAAI,CAACA,IAAI,CAAE;AAClC,KAAM,CAAAa,IAAI,CAAGD,KAAK,CAACE,IAAI,CAAED,IAAe,EAAKA,IAAI,CAACR,EAAE,GAAKH,QAAQ,CAAC,CAElE,GAAI,CAACW,IAAI,EAAI,CAACA,IAAI,CAACN,KAAK,CAAE,CACtB,MAAO,EAAE,CACb,CACA,MAAO,CAAAM,IAAI,CAACN,KAAK,CAACQ,GAAG,CAAEC,IAAW,EAAKA,IAAI,CAACC,GAAG,CAAC,CACpD,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,CAAAA,KAAK,CACf,CACJ,CAAC,CACDE,OAAO,CAAE,KAAAA,CAAOlB,QAAgB,CAAEmB,IAAY,GAAK,CAC/C;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA/B,KAAK,CAACa,IAAI,CAAC,GAAGT,OAAO,CAACC,GAAG,CAACC,iBAAiB,UAAUK,QAAQ,QAAQ,CAAE,CAACG,EAAE,CAAEgB,IAAI,CAAEJ,GAAG,CAAEI,IAAI,CAAC,CAAC,CAACvB,IAAI,CAACC,GAAG,EAAEA,GAAG,CAACC,IAAI,CAACA,IAAI,CAACO,KAAK,CAAC,CACnJ,MAAO,CAAAC,OAAO,CAACC,OAAO,CAACa,QAAQ,CAAC,CACpC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}