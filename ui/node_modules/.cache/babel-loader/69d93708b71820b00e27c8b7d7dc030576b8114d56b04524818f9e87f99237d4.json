{"ast":null,"code":"import axios from 'axios';\n//import { ListsApi } from 'todo-list-client'\n//const api = new ListsApi()\n\n//const lists = ['Work Tasks', 'Personal Tasks', 'Shopping List']\n//const listItems: Record<string, string[]> = {\n//   'Work Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n//   'Personal Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n//  'Shopping List': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter']\n//}\n\nexport const apiClient = {\n  getLists: async () => {\n    return axios.get(`${process.env.REACT_APP_API_URL}/lists`).then(res => res.data);\n  },\n  addList: async listName => {\n    const addedList = axios.post(`${process.env.REACT_APP_API_URL}/lists`, {\n      id: listName,\n      description: listName,\n      items: []\n    }).then(res => res.data.data.id);\n    return Promise.resolve(addedList);\n  },\n  getTodos: async listName => {\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/lists`);\n      const lists = response.data.data; // Ensure this is an array\n      const list = lists.find(list => list.id === listName);\n      if (!list || !list.items) {\n        return [];\n      }\n      return list.items.map(item => item);\n    } catch (error) {\n      console.error(\"Error fetching todos:\", error);\n      throw error;\n    }\n  },\n  addTodo: async (listName, todoVal) => {\n    //console.debug('-- addTodo', listName, todo, listItems);\n    const addedtem = await axios.post(`${process.env.REACT_APP_API_URL}/lists/${listName}/items`, {\n      id: todoVal.todo,\n      nom: todoVal.todo,\n      description: todoVal.description,\n      status: todoVal.status\n    }).then(res => res.data.data.items);\n    return Promise.resolve(addedtem);\n  },\n  delTodo: async (listName, params) => {\n    //console.debug('-- addTodo', listName, todo, listItems);\n    const addedtem = await axios.post(`${process.env.REACT_APP_API_URL}/lists/${listName}/items`, {\n      id: todoVal.todo,\n      nom: todoVal.todo,\n      description: todoVal.description,\n      status: todoVal.status\n    }).then(res => res.data.data.items);\n    return Promise.resolve(addedtem);\n  }\n};","map":{"version":3,"names":["axios","apiClient","getLists","get","process","env","REACT_APP_API_URL","then","res","data","addList","listName","addedList","post","id","description","items","Promise","resolve","getTodos","response","lists","list","find","map","item","error","console","addTodo","todoVal","addedtem","todo","nom","status","delTodo","params"],"sources":["/home/kaies/Desktop/todo-list/ui/src/api-client.ts"],"sourcesContent":["import axios from 'axios'; \nimport { IItem, ITodoList } from '../interfaces';\n\n//import { ListsApi } from 'todo-list-client'\n//const api = new ListsApi()\n\n\n//const lists = ['Work Tasks', 'Personal Tasks', 'Shopping List']\n//const listItems: Record<string, string[]> = {\n //   'Work Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n //   'Personal Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n  //  'Shopping List': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter']\n//}\n\n\nexport const apiClient = {\n    getLists: async () => {\n        return axios.get(`${process.env.REACT_APP_API_URL}/lists`).then(res=>res.data)\n    },\n    addList: async (listName: string) => {\n        const addedList = axios.post(`${process.env.REACT_APP_API_URL}/lists`, {id: listName, description: listName,items:[]}).then(res=>res.data.data.id);\n        return Promise.resolve(addedList)\n    },\n    getTodos: async (listName: string): Promise<IItem[]> => {\n        try {\n            const response = await axios.get(`${process.env.REACT_APP_API_URL}/lists`);\n            const lists = response.data.data; // Ensure this is an array\n            const list = lists.find((list: ITodoList) => list.id === listName);\n    \n            if (!list || !list.items) {\n                return [];\n            }\n            return list.items.map((item: IItem) => item);\n        } catch (error) {\n            console.error(\"Error fetching todos:\", error);\n            throw error; \n        }\n    },\n    addTodo: async (listName: string, todoVal: {todo:string, description:string,status:string}) => {\n        //console.debug('-- addTodo', listName, todo, listItems);\n        const addedtem = await axios.post(`${process.env.REACT_APP_API_URL}/lists/${listName}/items`, {id: todoVal.todo, nom: todoVal.todo, description: todoVal.description,status:todoVal.status}).then(res=>res.data.data.items);\n        return Promise.resolve(addedtem);\n    },\n    delTodo: async (listName: string, params: {todoId:string, todoList:string}) => {\n        //console.debug('-- addTodo', listName, todo, listItems);\n        const addedtem = await axios.post(`${process.env.REACT_APP_API_URL}/lists/${listName}/items`, {id: todoVal.todo, nom: todoVal.todo, description: todoVal.description,status:todoVal.status}).then(res=>res.data.data.items);\n        return Promise.resolve(addedtem);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}