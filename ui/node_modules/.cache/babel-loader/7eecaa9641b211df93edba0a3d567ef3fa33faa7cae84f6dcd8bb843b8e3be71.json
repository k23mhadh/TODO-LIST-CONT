{"ast":null,"code":"import axios from 'axios';\n//import { ListsApi } from 'todo-list-client'\n//const api = new ListsApi()\n\n//const lists = ['Work Tasks', 'Personal Tasks', 'Shopping List']\n//const listItems: Record<string, string[]> = {\n//   'Work Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n//   'Personal Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n//  'Shopping List': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter']\n//}\n\nexport const apiClient = {\n  getLists: async () => {\n    return axios.get('http://localhost:3000/lists').then(res => res.data);\n  },\n  addList: async listName => {\n    const addedList = axios.post('http://localhost:3000/lists', {\n      id: listName,\n      description: listName,\n      items: []\n    }).then(res => res.data.data.id);\n    return Promise.resolve(addedList);\n  },\n  getTodos: async listName => {\n    try {\n      const response = await axios.get(`http://localhost:3000/lists`);\n      const lists = response.data.data; // Ensure this is an array\n      const list = lists.find(list => list.id === listName);\n      if (!list || !list.items) {\n        return [];\n      }\n      return list.items.map(item => item.nom);\n    } catch (error) {\n      console.error(\"Error fetching todos:\", error);\n      throw error;\n    }\n  },\n  addTodo: async (listName, todo) => {\n    //console.debug('-- addTodo', listName, todo, listItems);\n    const addedtem = await axios.post(`http://localhost:3000/lists/${listName}/items`, {\n      id: todo,\n      nom: todo\n    }).then(res => res.data.data.items);\n    return Promise.resolve(addedtem);\n  }\n};","map":{"version":3,"names":["axios","apiClient","getLists","get","then","res","data","addList","listName","addedList","post","id","description","items","Promise","resolve","getTodos","response","lists","list","find","map","item","nom","error","console","addTodo","todo","addedtem"],"sources":["/home/kaies/Desktop/todo-list/todolists-frontend/src/api-client.ts"],"sourcesContent":["import axios from 'axios'; \nimport { IItem, ITodoList } from '../interfaces';\n\n//import { ListsApi } from 'todo-list-client'\n//const api = new ListsApi()\n\n\n//const lists = ['Work Tasks', 'Personal Tasks', 'Shopping List']\n//const listItems: Record<string, string[]> = {\n //   'Work Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n //   'Personal Tasks': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter'],\n  //  'Shopping List': ['Buy groceries', 'Complete React project', 'Exercise for 30 minutes', 'Read a book chapter']\n//}\n\n\nexport const apiClient = {\n    getLists: async () => {\n        return axios.get('http://localhost:3000/lists').then(res=>res.data)\n    },\n    addList: async (listName: string) => {\n        const addedList = axios.post('http://localhost:3000/lists', {id: listName, description: listName,items:[]}).then(res=>res.data.data.id);\n        return Promise.resolve(addedList)\n    },\n    getTodos: async (listName: string): Promise<string[]> => {\n        try {\n            const response = await axios.get(`http://localhost:3000/lists`);\n            const lists = response.data.data; // Ensure this is an array\n            const list = lists.find((list: ITodoList) => list.id === listName);\n    \n            if (!list || !list.items) {\n                return [];\n            }\n            return list.items.map((item: IItem) => item.nom);\n        } catch (error) {\n            console.error(\"Error fetching todos:\", error);\n            throw error; \n        }\n    },\n    addTodo: async (listName: string, todo: string) => {\n        //console.debug('-- addTodo', listName, todo, listItems);\n        const addedtem = await axios.post(`http://localhost:3000/lists/${listName}/items`, {id: todo, nom: todo}).then(res=>res.data.data.items);\n        return Promise.resolve(addedtem);\n    }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB;AACA;;AAGA;AACA;AACC;AACA;AACC;AACF;;AAGA,OAAO,MAAMC,SAAS,GAAG;EACrBC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IAClB,OAAOF,KAAK,CAACG,GAAG,CAAC,6BAA6B,CAAC,CAACC,IAAI,CAACC,GAAG,IAAEA,GAAG,CAACC,IAAI,CAAC;EACvE,CAAC;EACDC,OAAO,EAAE,MAAOC,QAAgB,IAAK;IACjC,MAAMC,SAAS,GAAGT,KAAK,CAACU,IAAI,CAAC,6BAA6B,EAAE;MAACC,EAAE,EAAEH,QAAQ;MAAEI,WAAW,EAAEJ,QAAQ;MAACK,KAAK,EAAC;IAAE,CAAC,CAAC,CAACT,IAAI,CAACC,GAAG,IAAEA,GAAG,CAACC,IAAI,CAACA,IAAI,CAACK,EAAE,CAAC;IACvI,OAAOG,OAAO,CAACC,OAAO,CAACN,SAAS,CAAC;EACrC,CAAC;EACDO,QAAQ,EAAE,MAAOR,QAAgB,IAAwB;IACrD,IAAI;MACA,MAAMS,QAAQ,GAAG,MAAMjB,KAAK,CAACG,GAAG,CAAC,6BAA6B,CAAC;MAC/D,MAAMe,KAAK,GAAGD,QAAQ,CAACX,IAAI,CAACA,IAAI,CAAC,CAAC;MAClC,MAAMa,IAAI,GAAGD,KAAK,CAACE,IAAI,CAAED,IAAe,IAAKA,IAAI,CAACR,EAAE,KAAKH,QAAQ,CAAC;MAElE,IAAI,CAACW,IAAI,IAAI,CAACA,IAAI,CAACN,KAAK,EAAE;QACtB,OAAO,EAAE;MACb;MACA,OAAOM,IAAI,CAACN,KAAK,CAACQ,GAAG,CAAEC,IAAW,IAAKA,IAAI,CAACC,GAAG,CAAC;IACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACf;EACJ,CAAC;EACDE,OAAO,EAAE,MAAAA,CAAOlB,QAAgB,EAAEmB,IAAY,KAAK;IAC/C;IACA,MAAMC,QAAQ,GAAG,MAAM5B,KAAK,CAACU,IAAI,CAAC,+BAA+BF,QAAQ,QAAQ,EAAE;MAACG,EAAE,EAAEgB,IAAI;MAAEJ,GAAG,EAAEI;IAAI,CAAC,CAAC,CAACvB,IAAI,CAACC,GAAG,IAAEA,GAAG,CAACC,IAAI,CAACA,IAAI,CAACO,KAAK,CAAC;IACxI,OAAOC,OAAO,CAACC,OAAO,CAACa,QAAQ,CAAC;EACpC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}