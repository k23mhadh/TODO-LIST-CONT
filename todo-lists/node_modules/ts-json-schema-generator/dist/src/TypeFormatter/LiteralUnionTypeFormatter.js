"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLiteralUnion = exports.LiteralUnionTypeFormatter = void 0;
const LiteralType_js_1 = require("../Type/LiteralType.js");
const NullType_js_1 = require("../Type/NullType.js");
const StringType_js_1 = require("../Type/StringType.js");
const UnionType_js_1 = require("../Type/UnionType.js");
const typeName_js_1 = require("../Utils/typeName.js");
const uniqueArray_js_1 = require("../Utils/uniqueArray.js");
class LiteralUnionTypeFormatter {
    supportsType(type) {
        return type instanceof UnionType_js_1.UnionType && type.getTypes().length > 0 && isLiteralUnion(type);
    }
    getDefinition(type) {
        let hasString = false;
        let preserveLiterals = false;
        let allStrings = true;
        let hasNull = false;
        const literals = type.getFlattenedTypes();
        const types = literals.filter((t) => {
            if (t instanceof StringType_js_1.StringType) {
                hasString = true;
                preserveLiterals = preserveLiterals || t.getPreserveLiterals();
                return false;
            }
            else if (t instanceof NullType_js_1.NullType) {
                hasNull = true;
                return true;
            }
            else if (t instanceof LiteralType_js_1.LiteralType && !t.isString()) {
                allStrings = false;
            }
            return true;
        });
        if (allStrings && hasString && !preserveLiterals) {
            return {
                type: hasNull ? ["string", "null"] : "string",
            };
        }
        const values = (0, uniqueArray_js_1.uniqueArray)(types.map(getLiteralValue));
        const typeNames = (0, uniqueArray_js_1.uniqueArray)(types.map(getLiteralType));
        const ret = {
            type: typeNames.length === 1 ? typeNames[0] : typeNames,
            enum: values,
        };
        if (preserveLiterals) {
            return {
                anyOf: [
                    {
                        type: "string",
                    },
                    ret,
                ],
            };
        }
        return ret;
    }
    getChildren(type) {
        return [];
    }
}
exports.LiteralUnionTypeFormatter = LiteralUnionTypeFormatter;
function isLiteralUnion(type) {
    return type
        .getFlattenedTypes()
        .every((item) => item instanceof LiteralType_js_1.LiteralType || item instanceof NullType_js_1.NullType || item instanceof StringType_js_1.StringType);
}
exports.isLiteralUnion = isLiteralUnion;
function getLiteralValue(value) {
    return value instanceof LiteralType_js_1.LiteralType ? value.getValue() : null;
}
function getLiteralType(value) {
    return value instanceof LiteralType_js_1.LiteralType ? (0, typeName_js_1.typeName)(value.getValue()) : "null";
}
//# sourceMappingURL=LiteralUnionTypeFormatter.js.map